# -*- coding: utf-8 -*-
"""Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d09e5JcREkBxHzb3sJa3Z5IbzSXBdAHH

## Import Library
"""

import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler, normalize, StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

"""## Data Understanding"""

# Read dataset
df_customer = pd.read_csv('dataset/customer.csv', delimiter=';')
df_product = pd.read_csv('dataset/product.csv', delimiter=';')
df_store = pd.read_csv('dataset/store.csv', delimiter=';')
df_transaction = pd.read_csv('dataset/transaction.csv', delimiter=';')

# Merge dataset
df_merge = pd.merge(df_transaction, df_customer, on=['CustomerID'])
df_merge = pd.merge(df_merge, df_product, on=['ProductID'])
df_merge = pd.merge(df_merge, df_store, on=['StoreID'])

# Menampilkan 5 data teratas
df_merge.head()

# Menampilkan total baris dan kolom
print(f'Total baris pada datset : {df_merge.shape[0]}')
print(f'Total kolom pada datset : {df_merge.shape[1]}')

# Menampilkan informasi attribut
df_merge.info()

# Mengecek missing value
print('Jumlah missing value untuk setiap kolom')
df_merge.isnull().sum()

# Mengecek data duplicate
duplicate_count = df_merge.duplicated().sum()
print(f"Jumlah data duplikat secara keseluruhan: {duplicate_count}")

# Menampilkan correlation matrix
df_merge.corr(numeric_only=True)

# Visualisasi: Jumlah qty yang dibeli oleh setiap customer_id
plt.figure(figsize=(10, 6))
sns.barplot(data=df_merge, x='CustomerID', y='Qty', estimator=sum)
plt.title('Jumlah Qty yang Dibeli per Customer')
plt.xlabel('Customer ID')
plt.ylabel('Total Qty')
plt.xticks(rotation=45)
plt.show()

# Visualisasi: Jumlah amount yang dibeli oleh setiap customer_id
plt.figure(figsize=(10, 6))
sns.barplot(data=df_merge, x='CustomerID', y='TotalAmount', estimator=sum)
plt.title('Jumlah Amount yang Dibeli per Customer')
plt.xlabel('Customer ID')
plt.ylabel('Total Amount')
plt.xticks(rotation=45)
plt.show()

# Visualisasi: Total transaction yang dilakukan oleh setiap customer_id
transaction_count = df_merge['CustomerID'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x=transaction_count.index, y=transaction_count.values)
plt.title('Total Transaction per Customer')
plt.xlabel('Customer ID')
plt.ylabel('Total Transaction Count')
plt.xticks(rotation=45)
plt.show()

"""## Data Preparation"""

# Menghilangkan missing value
df_merge = df_merge.dropna()

# Membuat data baru untuk clustering
df_cluster = df_merge.groupby(['CustomerID']).agg({
    'TransactionID' : 'count',
    'Qty' : 'sum',
    'TotalAmount' : 'sum'
}).reset_index()
df_cluster.rename(columns = {'TransactionID':'Total Transaction', 'TotalAmount' : 'Total Amount'}, inplace = True)

# Membuang kolom CustomerID
df_cluster = df_cluster.drop(columns=['CustomerID'])
df_cluster.head()

# Melakukan normalisasi MinMax
scaler = MinMaxScaler()

df_normalized = scaler.fit_transform(df_cluster)
df_normalized = pd.DataFrame(df_normalized, columns=df_cluster.columns, index=df_cluster.index)
df_normalized.head()

"""## Modeling"""

K = range(2, 21)
fits = []
score = []

for k in K:
    model = KMeans(n_clusters=k, random_state=42, n_init='auto')
    model.fit(df_normalized)

    fits.append(model)
    score.append(silhouette_score(df_normalized, model.labels_, metric='euclidean'))

"""## Evaluation"""

# Menampilkan grafik hasil silhouette score tiap K
sns.lineplot(x=K, y=score)